Timer unit: 4.46227e-07 s

Total time: 0.945583 s
File: C:\Users\marti\Documents\Uni_ETH\FS18\StochSim\ssa_routine.py
Function: ssa_routine at line 92

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    92                                           def ssa_routine(k, t_end, q0, nu):
    93                                               """ Stochastic Simulation Algorithm
    94                                           
    95                                               Performs sampling from distribution governed by chemical master equation.
    96                                           
    97                                               Parameters
    98                                               --------------
    99                                               k: array, vector stochastic reaction constants
   100                                               t_end: int, number of steps for the simulation
   101                                               q0: array, initial number of molecules for each species
   102                                               nu: ndarray, stochiometric matrix, with state change vectors in columns
   103                                               
   104                                               Returns
   105                                               --------------
   106                                               Q: array, vector of states q at times t
   107                                               time: array, vector of times t
   108                                               """
   109                                               
   110                                               #Initialize arrays to store states and tick times.
   111         1            6      6.0      0.0      time = []
   112         1            4      4.0      0.0      t = 0
   113         1            3      3.0      0.0      time.append(t)
   114                                               
   115         1            3      3.0      0.0      Q = []
   116         1            3      3.0      0.0      state = q0
   117         1            3      3.0      0.0      Q.append(state)
   118                                               
   119     23637       377194     16.0     17.8      while t < t_end:  
   120     23636       329273     13.9     15.5          propensities, total_prop = get_propensities(k, state)
   121     23636       517179     21.9     24.4          if total_prop == 0 or any(propensities < 0):
   122                                                       print("All populations go to extinction, end of simulation.")
   123                                                       print("Relative time: {:.2f}".format(t/t_end))
   124                                                       return np.asarray(Q), np.asarray(time)
   125                                                   # Draw random samples for update of state and time step
   126     23636       331006     14.0     15.6          idx, tau = draw_ssa(propensities, total_prop)
   127                                                   ## Find random change in state - see theory
   128     23636       285636     12.1     13.5          state = state + nu[idx, :]
   129     23636        98688      4.2      4.7          Q.append(state)
   130                                                   
   131                                                   ## Find random time step size - see theory
   132     23636        65021      2.8      3.1          t = t + tau
   133     23636        64774      2.7      3.1          time.append(t)
   134                                               
   135                                               # Add singleton dimension for easier concatenation later
   136         1        46126  46126.0      2.2      Q = np.asarray(Q)
   137         1          102    102.0      0.0      Q = np.reshape(Q, Q.shape+(1,))
   138         1         4005   4005.0      0.2      time = np.asarray(time)
   139         1           35     35.0      0.0      time = np.reshape(time, time.shape+(1,))
   140                                               
   141         1            3      3.0      0.0      return Q, time